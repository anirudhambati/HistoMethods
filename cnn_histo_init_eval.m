function net = cnn_histo_init_eval(opts)

lr = [.1 2] ;
weights = load(strcat(opts.dataloc,'net-epoch-',num2str(opts.train.numEpochs),'.mat'),'net');

net.layers = {} ;

% Block 1
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{weights.net.layers{1,1}.weights{1,1},weights.net.layers{1,1}.weights{1,2}}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad',0) ;



% Block 2
net.layers{end+1} = struct('type', 'conv', ...
                           'weights',{{weights.net.layers{1,4}.weights{1,1},weights.net.layers{1,4}.weights{1,2}}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad',0) ;


%Fully Connected layers
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{weights.net.layers{1,7}.weights{1,1},weights.net.layers{1,7}.weights{1,2}}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'dropout', ...
                           'rate', 0.2) ;


net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{weights.net.layers{1,10}.weights{1,1},weights.net.layers{1,10}.weights{1,2}}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'dropout', ...
                           'rate', 0.2) ;


%Output layer
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{weights.net.layers{1,13}.weights{1,1},weights.net.layers{1,13}.weights{1,2}}}, ...
                           'learningRate', .1*lr, ...
                           'stride', 1, ...
                           'pad', 0) ;

% Loss layer
net.layers{end+1} = struct('type', 'softmax') ;